warning: unused variable: `max_concurrent`
   --> rabbitmesh/src/service.rs:163:13
    |
163 |         let max_concurrent = self.config.max_concurrent_messages;
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_concurrent`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused `std::result::Result` in tuple element 0 that must be used
   --> rabbitmesh/src/service.rs:145:9
    |
145 | /         tokio::try_join!(
146 | |             request_processor,
147 | |             response_processor, 
148 | |             cleanup_task,
149 | |             health_check_task,
150 | |         )?;
    | |__________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default

warning: unused `std::result::Result` in tuple element 1 that must be used
   --> rabbitmesh/src/service.rs:145:9
    |
145 | /         tokio::try_join!(
146 | |             request_processor,
147 | |             response_processor, 
148 | |             cleanup_task,
149 | |             health_check_task,
150 | |         )?;
    | |__________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` in tuple element 2 that must be used
   --> rabbitmesh/src/service.rs:145:9
    |
145 | /         tokio::try_join!(
146 | |             request_processor,
147 | |             response_processor, 
148 | |             cleanup_task,
149 | |             health_check_task,
150 | |         )?;
    | |__________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: unused `std::result::Result` in tuple element 3 that must be used
   --> rabbitmesh/src/service.rs:145:9
    |
145 | /         tokio::try_join!(
146 | |             request_processor,
147 | |             response_processor, 
148 | |             cleanup_task,
149 | |             health_check_task,
150 | |         )?;
    | |__________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled

warning: `rabbitmesh` (lib) generated 5 warnings
warning: constant `AUTH_SERVICE` is never used
 --> examples/blog-platform/post-service/src/config.rs:5:11
  |
5 | pub const AUTH_SERVICE: &str = "auth-service";
  |           ^^^^^^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: struct `PostSummary` is never constructed
  --> examples/blog-platform/post-service/src/models.rs:39:12
   |
39 | pub struct PostSummary {
   |            ^^^^^^^^^^^

warning: fields `id`, `username`, `email`, `created_at`, and `is_active` are never read
  --> examples/blog-platform/post-service/src/models.rs:55:9
   |
54 | pub struct UserProfile {
   |            ----------- fields in this struct
55 |     pub id: String,
   |         ^^
56 |     pub username: String,
   |         ^^^^^^^^
57 |     pub email: String,
   |         ^^^^^
58 |     pub created_at: String,
   |         ^^^^^^^^^^
59 |     pub is_active: bool,
   |         ^^^^^^^^^
   |
   = note: `UserProfile` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: `post-service` (bin "post-service") generated 3 warnings
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.17s
     Running `/Users/hangsia/projects/side/rabbitmq-microservice/rabbitmesh-lib/target/debug/post-service`
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m üöÄ Starting Post Service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m üìù Handles blog posts with auth service integration
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service::service[0m[2m:[0m ‚úÖ Sample posts created
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m üöÄ Creating microservice: post-service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::client[0m[2m:[0m üîó Creating service client: post-client
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::connection[0m[2m:[0m Successfully connected to RabbitMQ at amqp://localhost:5672
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::client[0m[2m:[0m ‚úÖ Service client connected: post-client
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::client[0m[2m:[0m ‚úÖ Service client ready: post-client
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m üîó Connected to other services via RabbitMQ
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::rpc[0m[2m:[0m Registered RPC handler for method: create_post
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::rpc[0m[2m:[0m Registered RPC handler for method: update_post
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::rpc[0m[2m:[0m Registered RPC handler for method: list_posts
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::rpc[0m[2m:[0m Registered RPC handler for method: get_post
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::rpc[0m[2m:[0m Registered RPC handler for method: get_posts_by_author
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::rpc[0m[2m:[0m Registered RPC handler for method: ping
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m ‚úÖ Post service handlers registered
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m üéØ Listening to RabbitMQ queue: rabbitmesh.post-service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m üîó Available methods:
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m    - create_post: Create new blog post (requires auth)
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m    - update_post: Update existing post (requires auth + ownership)
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m    - list_posts: Get all published posts
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m    - get_post: Get specific post by ID
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m    - get_posts_by_author: Get posts by author ID
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m    - ping: Health check
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m 
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m üîê This service communicates with:
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mpost_service[0m[2m:[0m    - Auth Service: Token validation & user info
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m üèÅ Starting microservice: post-service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::connection[0m[2m:[0m Successfully connected to RabbitMQ at amqp://localhost:5672
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m ‚úÖ Connected to RabbitMQ
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m ‚úÖ Declared queues: rabbitmesh.post-service, rabbitmesh.post-service.responses
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m ‚úÖ Request processor spawned for queue: rabbitmesh.post-service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m üì• Request processor started for post-service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m ‚úÖ Response processor spawned for queue: rabbitmesh.post-service.responses
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m üéØ Microservice post-service is running and ready to process messages
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m üì§ Response processor started for post-service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m üßπ Cleanup task started for post-service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m üíì Health check task started for post-service
[2m2025-08-28 05:35:52[0m [32m INFO[0m [2mrabbitmesh::service[0m[2m:[0m üìä Max concurrent messages: 100
